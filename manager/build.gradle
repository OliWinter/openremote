buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "de.richsource.gradle.plugins:gwt-gradle-plugin:$gwtGradlePluginVersion"
        classpath "net.ltgt.gradle:gradle-apt-plugin:$aptGradlePluginVersion"
    }
}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "application"
apply plugin: "net.ltgt.apt"
apply plugin: "gwt-compiler"

mainClassName = "org.openremote.manager.server.Server"

dependencies {

    compile project(":container")

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-jdk14:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"

    compile "org.xerial:sqlite-jdbc:$sqliteVersion"
    apt "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"

    compile "com.google.gwt:gwt-user:$gwtVersion"
    compile "cglib:cglib:$cglibVersion"
    compile "org.jboss.errai:errai-codegen-gwt:$erraiVersion"
    compile "org.jboss.errai:errai-data-binding:$erraiVersion"
    compile "org.jboss.errai:errai-navigation:$erraiVersion"
    compile "org.jboss.errai:errai-tools:$erraiVersion"
    compile "org.jboss.errai:errai-ui:$erraiVersion"
    compile "org.jboss.errai:errai-html5:$erraiVersion"
    compile "org.jboss.errai:errai-cdi-client:$erraiVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile "org.objenesis:objenesis:$objenesisVersion"
    testCompile "org.glassfish.tyrus:tyrus-client:$tyrusVersion"
    testCompile "org.glassfish.tyrus:tyrus-container-grizzly-client:$tyrusVersion"
            
    compile files('libs/orlibrary-0.3.0.jar')
    compile files('libs/orentities-1.2.0.jar')
}

configurations {
}

gwt {
    gwtVersion = project.properties.gwtVersion

    sourceLevel = JavaVersion.VERSION_1_8
    maxHeapSize = "1024M"

    modules("org.openremote.manager.Manager")

    test {
        hasGwtTests = false
    }

    dependencies {
      compile files('libs/jscore-1.0.jar')
    }
    
    compiler {
        style = "PRETTY"
    }

    superDev {

        // Generate minimal JS launcher in the webapp source folder (you might commit this or not, doesn't matter)
        launcherDir = file("src/main/webapp/gwt")

        // Careful, this binds to all interfaces on your machine!
        bindAddress = "0.0.0.0"
    }
}

// TODO Why is this not configurable?
tasks.withType(de.richsource.gradle.plugins.gwt.AbstractGwtActionTask) {

    doFirst {
        mkdir file("src/main/webapp/gwt")
    }

    //args "-logLevel", "TRACE"
    args "-generateJsInteropExports"

    // I've had various problems with this cache and GWT snapshot updates, so it's a good idea to make it easily cleanable
    jvmArgs("-Dgwt.persistentunitcachedir=$project.buildDir/gwt/cache")

    // There is _another_ GWT codeserver cache we can't clean automatically, the only solution is to override TMPDIR
    // On OS X it's /var/folders/vn/*/T/gwt-cache-*/gwt-rebuildCache
    jvmArgs("-Djava.io.tmpdir=$project.buildDir/tmp")
}
tasks.withType(de.richsource.gradle.plugins.gwt.GwtSuperDev) {
    args "-noprecompile"
}

clean.doFirst {
    // TODO Errai uses caching in superdevmode and it's a bit broken, so we must clean it sometimes
    delete "${projectDir}/.errai/"
}

distributions {
    main {
        contents {
            from("sample") {
                into "sample"
            }
            from("src/main/webapp") {
                into "webapp"
                exclude "gwt"
            }
            from(compileGwt.outputs) {
                into "webapp/gwt"
                exclude "WEB-INF"
            }
        }
    }
}

import com.bmuschko.gradle.docker.tasks.image.*

task createDockerfile(type: Dockerfile) {
    destFile = project.file("build/install/Dockerfile")
    from "java:8"
    environmentVariable "WEBSERVER_DOCROOT", "webapp"
    addFile project.name, "/opt/app"
    exposePort 8080
    workingDir "/opt/app"
    entryPoint "/opt/app/bin/$project.name"
}

task buildImage(type: DockerBuildImage) {
    dependsOn installDist, createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = dockerImageName
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    imageName = dockerImageName
}
